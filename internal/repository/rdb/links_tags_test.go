// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package rdb

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLinksTags(t *testing.T) {
	t.Parallel()

	query := LinksTags()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLinksTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LinksTag{}
	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LinksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLinksTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LinksTag{}
	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := LinksTags().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LinksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLinksTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LinksTag{}
	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LinksTagSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LinksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLinksTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LinksTag{}
	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LinksTagExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if LinksTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LinksTagExists to return true, but got false.")
	}
}

func testLinksTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LinksTag{}
	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	linksTagFound, err := FindLinksTag(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if linksTagFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLinksTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LinksTag{}
	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = LinksTags().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLinksTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LinksTag{}
	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := LinksTags().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLinksTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	linksTagOne := &LinksTag{}
	linksTagTwo := &LinksTag{}
	if err = randomize.Struct(seed, linksTagOne, linksTagDBTypes, false, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}
	if err = randomize.Struct(seed, linksTagTwo, linksTagDBTypes, false, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = linksTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = linksTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LinksTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLinksTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	linksTagOne := &LinksTag{}
	linksTagTwo := &LinksTag{}
	if err = randomize.Struct(seed, linksTagOne, linksTagDBTypes, false, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}
	if err = randomize.Struct(seed, linksTagTwo, linksTagDBTypes, false, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = linksTagOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = linksTagTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LinksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func linksTagBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *LinksTag) error {
	*o = LinksTag{}
	return nil
}

func linksTagAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *LinksTag) error {
	*o = LinksTag{}
	return nil
}

func linksTagAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *LinksTag) error {
	*o = LinksTag{}
	return nil
}

func linksTagBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LinksTag) error {
	*o = LinksTag{}
	return nil
}

func linksTagAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LinksTag) error {
	*o = LinksTag{}
	return nil
}

func linksTagBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LinksTag) error {
	*o = LinksTag{}
	return nil
}

func linksTagAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LinksTag) error {
	*o = LinksTag{}
	return nil
}

func linksTagBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LinksTag) error {
	*o = LinksTag{}
	return nil
}

func linksTagAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LinksTag) error {
	*o = LinksTag{}
	return nil
}

func testLinksTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &LinksTag{}
	o := &LinksTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, linksTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LinksTag object: %s", err)
	}

	AddLinksTagHook(boil.BeforeInsertHook, linksTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	linksTagBeforeInsertHooks = []LinksTagHook{}

	AddLinksTagHook(boil.AfterInsertHook, linksTagAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	linksTagAfterInsertHooks = []LinksTagHook{}

	AddLinksTagHook(boil.AfterSelectHook, linksTagAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	linksTagAfterSelectHooks = []LinksTagHook{}

	AddLinksTagHook(boil.BeforeUpdateHook, linksTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	linksTagBeforeUpdateHooks = []LinksTagHook{}

	AddLinksTagHook(boil.AfterUpdateHook, linksTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	linksTagAfterUpdateHooks = []LinksTagHook{}

	AddLinksTagHook(boil.BeforeDeleteHook, linksTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	linksTagBeforeDeleteHooks = []LinksTagHook{}

	AddLinksTagHook(boil.AfterDeleteHook, linksTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	linksTagAfterDeleteHooks = []LinksTagHook{}

	AddLinksTagHook(boil.BeforeUpsertHook, linksTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	linksTagBeforeUpsertHooks = []LinksTagHook{}

	AddLinksTagHook(boil.AfterUpsertHook, linksTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	linksTagAfterUpsertHooks = []LinksTagHook{}
}

func testLinksTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LinksTag{}
	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LinksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLinksTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LinksTag{}
	if err = randomize.Struct(seed, o, linksTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(linksTagColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := LinksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLinksTagToOneLinkUsingLink(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LinksTag
	var foreign Link

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, linksTagDBTypes, false, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, linkDBTypes, false, linkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Link struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LinkID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Link().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LinksTagSlice{&local}
	if err = local.L.LoadLink(ctx, tx, false, (*[]*LinksTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Link == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Link = nil
	if err = local.L.LoadLink(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Link == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLinksTagToOneTagUsingTag(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LinksTag
	var foreign Tag

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, linksTagDBTypes, false, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TagID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tag().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LinksTagSlice{&local}
	if err = local.L.LoadTag(ctx, tx, false, (*[]*LinksTag)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tag = nil
	if err = local.L.LoadTag(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLinksTagToOneSetOpLinkUsingLink(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LinksTag
	var b, c Link

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, linksTagDBTypes, false, strmangle.SetComplement(linksTagPrimaryKeyColumns, linksTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, linkDBTypes, false, strmangle.SetComplement(linkPrimaryKeyColumns, linkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, linkDBTypes, false, strmangle.SetComplement(linkPrimaryKeyColumns, linkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Link{&b, &c} {
		err = a.SetLink(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Link != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LinksTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LinkID != x.ID {
			t.Error("foreign key was wrong value", a.LinkID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LinkID))
		reflect.Indirect(reflect.ValueOf(&a.LinkID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LinkID != x.ID {
			t.Error("foreign key was wrong value", a.LinkID, x.ID)
		}
	}
}
func testLinksTagToOneSetOpTagUsingTag(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LinksTag
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, linksTagDBTypes, false, strmangle.SetComplement(linksTagPrimaryKeyColumns, linksTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tag{&b, &c} {
		err = a.SetTag(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LinksTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TagID))
		reflect.Indirect(reflect.ValueOf(&a.TagID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID, x.ID)
		}
	}
}

func testLinksTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LinksTag{}
	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLinksTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LinksTag{}
	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LinksTagSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLinksTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LinksTag{}
	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LinksTags().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	linksTagDBTypes = map[string]string{`ID`: `int`, `LinkID`: `int`, `TagID`: `int`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_               = bytes.MinRead
)

func testLinksTagsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(linksTagPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(linksTagAllColumns) == len(linksTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LinksTag{}
	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LinksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLinksTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(linksTagAllColumns) == len(linksTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LinksTag{}
	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LinksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, linksTagDBTypes, true, linksTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(linksTagAllColumns, linksTagPrimaryKeyColumns) {
		fields = linksTagAllColumns
	} else {
		fields = strmangle.SetComplement(
			linksTagAllColumns,
			linksTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LinksTagSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLinksTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(linksTagAllColumns) == len(linksTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLLinksTagUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := LinksTag{}
	if err = randomize.Struct(seed, &o, linksTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LinksTag: %s", err)
	}

	count, err := LinksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, linksTagDBTypes, false, linksTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LinksTag struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LinksTag: %s", err)
	}

	count, err = LinksTags().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
